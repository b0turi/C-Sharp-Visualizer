
import re
import json
import cgitb; cgitb.enable()
import types
import cgi

global mainDeclared
global varType
global varName
global varValue
global arrayIterator

def getNextLine(line):

    if mainDeclared == False: #is a main fxn declared?

        mainDeclaration(line) #if not, look to see if this line declares it

    else:

        searcher(line) #if declared, look to see if anything valuable is on the line

def mainDeclaration(line):

    regx = re.compile(r'''(
                #(.*)
                ()'static void main') ?
                ''')
    if not (regx.match(line) is None):
        #main has been declared
        mainDeclared = True

def searcher(line):

    regx = re.compile(r'''(
             (byte|sbyte|int|uint|short|ushort|long|ulong|float|double|char|decimal) #finds type if mainDeclaration
             )''')
    if regx.match(line) is None:
        #nothing declared, search to see if a variable changes
        variableChangeSearch(line)

    else:

        varType = regx.match.group(0)
        regx = re.compile(r'''(
                (\w+)   #find variable name
            )''')
        varName[arrayIterator] = regx.match(line).group(0)
        regx = re.compile(r'''(
                         (=)?    #does the variable have a value declared?
                          )''')
        if regx.match(line) is None:

            varValue[arrayIterator] = None
            arrayIterator += 1
            makeJSON()

        else:
            regx = re.compile(r'''(
                    (\w+)   #find the value
                )''')

            varValue[arrayIterator] = regx.match(line).group(0)
            arrayIterator += 1
            makeJSON()

def variableChangeSearch(line):

    regx = re.compile(r'''(
                                (\w+)   #find the name; group 1
                                (\s*)   #0 or more spaces; group 2
                                (=|\+\+|--) #equals sign, plus plus, or minus minus; group 3
                                (\s*)	#pasrse out the spaces; group 4
                                (\w*)	#any variables used in equation; group 5
                                 )''')
    m = regx.match()
    #Check to see if the variable is already declared
    found = False
    i = 0
    while (i < arrayIterator):
        if (varName[i] == m.group(1)):
            found = True
            break
        else:
            i += 1

    #Check for "++" and "--" operators
    if found and (m.group(5) is None):
        if m.group(3) == '++':
            if isinstance(varType[i], types.StringTypes):
                varValue[i] += 1
        elif m.group(3) == '--':
            if isinstance(varType[i], types.StringTypes):
                varValue[i] -= 1
    elif found:
        regx = re.compile(r'''(
                                    ((\w*)
                                      \s*
                                    (\+|-)
                                      \s*)*
                                     )''')
        m = regx.findAll(regx, line)
        operators = (len(m.group(0)) - 1) / 2 #number of operators
        varsUsed = m.group(1)
        opsUsed = m.group(2)
        varsNum = len(m.group(1))

        #in new array stores all to-be-used variable names to their value in the varsUsed array
        j = 0
        while j < len(varsUsed):
            if isinstance(varsUsed[j], types.StringTypes):
               k = 0
               while k < len(varName):
                    if varName[k] == varsUsed[j]:
                        varsUsed[j] = varValue[k]
                    k += 1
            j += 1
        result = varsUsed[0]

        #Check which of operators "+" "-" "*" "/" "+=" and "-=" are used
        j = 0
        while (j + 1 < varsNum) and (j < len(opsUsed)):
            if opsUsed[j] == '+':
                result = result + varsUsed[j + 1]
            elif opsUsed[j] == '-':
                result = result - varsUsed[j + 1]
            elif opsUsed[j] == '*':
                result = result * varsUsed[j + 1]
            elif opsUsed[j] == '/':
                result = result / varsUsed[j + 1]
            j += 1
        varValue[arrayIterator] = result
        
    makeJSON()

def makeJSON():

    data = [lineNumber, varType, varName, varValue]
    with open('output.txt', 'r+') as outputFile:
        json.dump(data, outputFile)
    outputFile.close()

    #takes lineNumber, varType array, varName array, and varValue array and puts into JSON format
    #sends JSON to frontend


#iterate through lines of textfile
mainDeclared = False
varType = []
varName = []
varValue = []
arrayIterator = 0

lineNumber = 0
outputFile = 'output.txt'
dataFromJS = cgi.FieldStorage()
codeLines = dataFromJS.list[0].value.split('\n')
while (len(codeLines) > 0 and (lineNumber <= 300)):
    getNextLine(codeLines[0])
    codeLines.pop(0)
    lineNumber += 1


